/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.1
 * source: sso/sso.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace sso {
    export class LoginRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            login?: string;
            email?: string;
            password?: string;
            app_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("login" in data && data.login != undefined) {
                    this.login = data.login;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("app_id" in data && data.app_id != undefined) {
                    this.app_id = data.app_id;
                }
            }
        }
        get login() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set login(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get app_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set app_id(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            login?: string;
            email?: string;
            password?: string;
            app_id?: number;
        }): LoginRequest {
            const message = new LoginRequest({});
            if (data.login != null) {
                message.login = data.login;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.app_id != null) {
                message.app_id = data.app_id;
            }
            return message;
        }
        toObject() {
            const data: {
                login?: string;
                email?: string;
                password?: string;
                app_id?: number;
            } = {};
            if (this.login != null) {
                data.login = this.login;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.app_id != null) {
                data.app_id = this.app_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.login.length)
                writer.writeString(1, this.login);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.app_id != 0)
                writer.writeInt32(4, this.app_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.login = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.app_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginRequest {
            return LoginRequest.deserialize(bytes);
        }
    }
    export class LoginResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): LoginResponse {
            const message = new LoginResponse({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginResponse {
            return LoginResponse.deserialize(bytes);
        }
    }
    export class LogoutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): LogoutRequest {
            const message = new LogoutRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutRequest {
            return LogoutRequest.deserialize(bytes);
        }
    }
    export class LogoutResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): LogoutResponse {
            const message = new LogoutResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogoutResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogoutResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogoutResponse {
            return LogoutResponse.deserialize(bytes);
        }
    }
    export class ResetPasswordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            new_password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("new_password" in data && data.new_password != undefined) {
                    this.new_password = data.new_password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            new_password?: string;
        }): ResetPasswordRequest {
            const message = new ResetPasswordRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.new_password != null) {
                message.new_password = data.new_password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                new_password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.new_password != null) {
                data.new_password = this.new_password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.new_password.length)
                writer.writeString(2, this.new_password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.new_password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordRequest {
            return ResetPasswordRequest.deserialize(bytes);
        }
    }
    export class ResetPasswordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): ResetPasswordResponse {
            const message = new ResetPasswordResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPasswordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResetPasswordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResetPasswordResponse {
            return ResetPasswordResponse.deserialize(bytes);
        }
    }
    export class RegisterRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): RegisterRequest {
            const message = new RegisterRequest({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterRequest {
            return RegisterRequest.deserialize(bytes);
        }
    }
    export class RegisterResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): RegisterResponse {
            const message = new RegisterResponse({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterResponse {
            return RegisterResponse.deserialize(bytes);
        }
    }
    export class UserInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): UserInfoRequest {
            const message = new UserInfoRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfoRequest {
            return UserInfoRequest.deserialize(bytes);
        }
    }
    export class UserInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            email?: string;
            is_admin?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("is_admin" in data && data.is_admin != undefined) {
                    this.is_admin = data.is_admin;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get is_admin() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set is_admin(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            username?: string;
            email?: string;
            is_admin?: boolean;
        }): UserInfoResponse {
            const message = new UserInfoResponse({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.is_admin != null) {
                message.is_admin = data.is_admin;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                email?: string;
                is_admin?: boolean;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.is_admin != null) {
                data.is_admin = this.is_admin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.is_admin != false)
                writer.writeBool(3, this.is_admin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.is_admin = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserInfoResponse {
            return UserInfoResponse.deserialize(bytes);
        }
    }
    export class UpdateUserInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            new_email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("new_email" in data && data.new_email != undefined) {
                    this.new_email = data.new_email;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            new_email?: string;
        }): UpdateUserInfoRequest {
            const message = new UpdateUserInfoRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.new_email != null) {
                message.new_email = data.new_email;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                new_email?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.new_email != null) {
                data.new_email = this.new_email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.new_email.length)
                writer.writeString(2, this.new_email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.new_email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserInfoRequest {
            return UpdateUserInfoRequest.deserialize(bytes);
        }
    }
    export class UpdateUserInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): UpdateUserInfoResponse {
            const message = new UpdateUserInfoResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserInfoResponse {
            return UpdateUserInfoResponse.deserialize(bytes);
        }
    }
    export class DeleteUserRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): DeleteUserRequest {
            const message = new DeleteUserRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
            return DeleteUserRequest.deserialize(bytes);
        }
    }
    export class DeleteUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): DeleteUserResponse {
            const message = new DeleteUserResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
            return DeleteUserResponse.deserialize(bytes);
        }
    }
    export class EmailVerificationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            verification_code?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("verification_code" in data && data.verification_code != undefined) {
                    this.verification_code = data.verification_code;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get verification_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set verification_code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            verification_code?: string;
        }): EmailVerificationRequest {
            const message = new EmailVerificationRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.verification_code != null) {
                message.verification_code = data.verification_code;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                verification_code?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.verification_code != null) {
                data.verification_code = this.verification_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.verification_code.length)
                writer.writeString(2, this.verification_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailVerificationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailVerificationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.verification_code = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailVerificationRequest {
            return EmailVerificationRequest.deserialize(bytes);
        }
    }
    export class EmailVerificationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): EmailVerificationResponse {
            const message = new EmailVerificationResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailVerificationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailVerificationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailVerificationResponse {
            return EmailVerificationResponse.deserialize(bytes);
        }
    }
    export class IsAdminRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): IsAdminRequest {
            const message = new IsAdminRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsAdminRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsAdminRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsAdminRequest {
            return IsAdminRequest.deserialize(bytes);
        }
    }
    export class IsAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_admin?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_admin" in data && data.is_admin != undefined) {
                    this.is_admin = data.is_admin;
                }
            }
        }
        get is_admin() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_admin(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            is_admin?: boolean;
        }): IsAdminResponse {
            const message = new IsAdminResponse({});
            if (data.is_admin != null) {
                message.is_admin = data.is_admin;
            }
            return message;
        }
        toObject() {
            const data: {
                is_admin?: boolean;
            } = {};
            if (this.is_admin != null) {
                data.is_admin = this.is_admin;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_admin != false)
                writer.writeBool(1, this.is_admin);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_admin = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsAdminResponse {
            return IsAdminResponse.deserialize(bytes);
        }
    }
    export class AuthHistoryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): AuthHistoryRequest {
            const message = new AuthHistoryRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthHistoryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthHistoryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthHistoryRequest {
            return AuthHistoryRequest.deserialize(bytes);
        }
    }
    export class AuthHistoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set events(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            events?: string[];
        }): AuthHistoryResponse {
            const message = new AuthHistoryResponse({});
            if (data.events != null) {
                message.events = data.events;
            }
            return message;
        }
        toObject() {
            const data: {
                events?: string[];
            } = {};
            if (this.events != null) {
                data.events = this.events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedString(1, this.events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthHistoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthHistoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthHistoryResponse {
            return AuthHistoryResponse.deserialize(bytes);
        }
    }
    export class RegisterAppRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_name" in data && data.app_name != undefined) {
                    this.app_name = data.app_name;
                }
            }
        }
        get app_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set app_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            app_name?: string;
        }): RegisterAppRequest {
            const message = new RegisterAppRequest({});
            if (data.app_name != null) {
                message.app_name = data.app_name;
            }
            return message;
        }
        toObject() {
            const data: {
                app_name?: string;
            } = {};
            if (this.app_name != null) {
                data.app_name = this.app_name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_name.length)
                writer.writeString(1, this.app_name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterAppRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterAppRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterAppRequest {
            return RegisterAppRequest.deserialize(bytes);
        }
    }
    export class RegisterAppResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_id?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_id" in data && data.app_id != undefined) {
                    this.app_id = data.app_id;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get app_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set app_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            app_id?: number;
            message?: string;
        }): RegisterAppResponse {
            const message = new RegisterAppResponse({});
            if (data.app_id != null) {
                message.app_id = data.app_id;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                app_id?: number;
                message?: string;
            } = {};
            if (this.app_id != null) {
                data.app_id = this.app_id;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_id != 0)
                writer.writeInt32(1, this.app_id);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterAppResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RegisterAppResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_id = reader.readInt32();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RegisterAppResponse {
            return RegisterAppResponse.deserialize(bytes);
        }
    }
    export class DeleteAppRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_id" in data && data.app_id != undefined) {
                    this.app_id = data.app_id;
                }
            }
        }
        get app_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set app_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            app_id?: number;
        }): DeleteAppRequest {
            const message = new DeleteAppRequest({});
            if (data.app_id != null) {
                message.app_id = data.app_id;
            }
            return message;
        }
        toObject() {
            const data: {
                app_id?: number;
            } = {};
            if (this.app_id != null) {
                data.app_id = this.app_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_id != 0)
                writer.writeInt32(1, this.app_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAppRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAppRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAppRequest {
            return DeleteAppRequest.deserialize(bytes);
        }
    }
    export class DeleteAppResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): DeleteAppResponse {
            const message = new DeleteAppResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAppResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAppResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAppResponse {
            return DeleteAppResponse.deserialize(bytes);
        }
    }
    export class AppDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_id" in data && data.app_id != undefined) {
                    this.app_id = data.app_id;
                }
            }
        }
        get app_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set app_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            app_id?: number;
        }): AppDataRequest {
            const message = new AppDataRequest({});
            if (data.app_id != null) {
                message.app_id = data.app_id;
            }
            return message;
        }
        toObject() {
            const data: {
                app_id?: number;
            } = {};
            if (this.app_id != null) {
                data.app_id = this.app_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_id != 0)
                writer.writeInt32(1, this.app_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppDataRequest {
            return AppDataRequest.deserialize(bytes);
        }
    }
    export class AppDataResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_name?: string;
            app_status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_name" in data && data.app_name != undefined) {
                    this.app_name = data.app_name;
                }
                if ("app_status" in data && data.app_status != undefined) {
                    this.app_status = data.app_status;
                }
            }
        }
        get app_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set app_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get app_status() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set app_status(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            app_name?: string;
            app_status?: string;
        }): AppDataResponse {
            const message = new AppDataResponse({});
            if (data.app_name != null) {
                message.app_name = data.app_name;
            }
            if (data.app_status != null) {
                message.app_status = data.app_status;
            }
            return message;
        }
        toObject() {
            const data: {
                app_name?: string;
                app_status?: string;
            } = {};
            if (this.app_name != null) {
                data.app_name = this.app_name;
            }
            if (this.app_status != null) {
                data.app_status = this.app_status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_name.length)
                writer.writeString(1, this.app_name);
            if (this.app_status.length)
                writer.writeString(2, this.app_status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppDataResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppDataResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_name = reader.readString();
                        break;
                    case 2:
                        message.app_status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppDataResponse {
            return AppDataResponse.deserialize(bytes);
        }
    }
    export class UserRolesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): UserRolesRequest {
            const message = new UserRolesRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRolesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRolesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserRolesRequest {
            return UserRolesRequest.deserialize(bytes);
        }
    }
    export class UserRolesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            roles?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("roles" in data && data.roles != undefined) {
                    this.roles = data.roles;
                }
            }
        }
        get roles() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set roles(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            roles?: string[];
        }): UserRolesResponse {
            const message = new UserRolesResponse({});
            if (data.roles != null) {
                message.roles = data.roles;
            }
            return message;
        }
        toObject() {
            const data: {
                roles?: string[];
            } = {};
            if (this.roles != null) {
                data.roles = this.roles;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.roles.length)
                writer.writeRepeatedString(1, this.roles);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRolesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRolesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserRolesResponse {
            return UserRolesResponse.deserialize(bytes);
        }
    }
    export class UpdateUserRolesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            roles?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("roles" in data && data.roles != undefined) {
                    this.roles = data.roles;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get roles() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set roles(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            roles?: string[];
        }): UpdateUserRolesRequest {
            const message = new UpdateUserRolesRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.roles != null) {
                message.roles = data.roles;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                roles?: string[];
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.roles != null) {
                data.roles = this.roles;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.roles.length)
                writer.writeRepeatedString(2, this.roles);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRolesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRolesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRolesRequest {
            return UpdateUserRolesRequest.deserialize(bytes);
        }
    }
    export class UpdateUserRolesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            message?: string;
        }): UpdateUserRolesResponse {
            const message = new UpdateUserRolesResponse({});
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateUserRolesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateUserRolesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateUserRolesResponse {
            return UpdateUserRolesResponse.deserialize(bytes);
        }
    }
    export class CheckPermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            permission?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get permission() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set permission(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            permission?: string;
        }): CheckPermissionRequest {
            const message = new CheckPermissionRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.permission != null) {
                message.permission = data.permission;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                permission?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.permission != null) {
                data.permission = this.permission;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.permission.length)
                writer.writeString(2, this.permission);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckPermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckPermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.permission = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckPermissionRequest {
            return CheckPermissionRequest.deserialize(bytes);
        }
    }
    export class CheckPermissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            has_permission?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("has_permission" in data && data.has_permission != undefined) {
                    this.has_permission = data.has_permission;
                }
            }
        }
        get has_permission() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set has_permission(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            has_permission?: boolean;
        }): CheckPermissionResponse {
            const message = new CheckPermissionResponse({});
            if (data.has_permission != null) {
                message.has_permission = data.has_permission;
            }
            return message;
        }
        toObject() {
            const data: {
                has_permission?: boolean;
            } = {};
            if (this.has_permission != null) {
                data.has_permission = this.has_permission;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_permission != false)
                writer.writeBool(1, this.has_permission);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckPermissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckPermissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.has_permission = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckPermissionResponse {
            return CheckPermissionResponse.deserialize(bytes);
        }
    }
    export class LdapAuthenticateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): LdapAuthenticateRequest {
            const message = new LdapAuthenticateRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LdapAuthenticateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LdapAuthenticateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LdapAuthenticateRequest {
            return LdapAuthenticateRequest.deserialize(bytes);
        }
    }
    export class LdapAuthenticateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): LdapAuthenticateResponse {
            const message = new LdapAuthenticateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LdapAuthenticateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LdapAuthenticateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LdapAuthenticateResponse {
            return LdapAuthenticateResponse.deserialize(bytes);
        }
    }
    export class GoogleAuthenticateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): GoogleAuthenticateRequest {
            const message = new GoogleAuthenticateRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoogleAuthenticateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoogleAuthenticateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GoogleAuthenticateRequest {
            return GoogleAuthenticateRequest.deserialize(bytes);
        }
    }
    export class GoogleAuthenticateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): GoogleAuthenticateResponse {
            const message = new GoogleAuthenticateResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoogleAuthenticateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoogleAuthenticateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GoogleAuthenticateResponse {
            return GoogleAuthenticateResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserAuthenticationService {
        static definition = {
            Login: {
                path: "/sso.UserAuthentication/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
            },
            Logout: {
                path: "/sso.UserAuthentication/Logout",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LogoutRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LogoutRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LogoutResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LogoutResponse.deserialize(new Uint8Array(bytes))
            },
            ResetPassword: {
                path: "/sso.UserAuthentication/ResetPassword",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ResetPasswordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ResetPasswordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResetPasswordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResetPasswordResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
        abstract Logout(call: grpc_1.ServerUnaryCall<LogoutRequest, LogoutResponse>, callback: grpc_1.sendUnaryData<LogoutResponse>): void;
        abstract ResetPassword(call: grpc_1.ServerUnaryCall<ResetPasswordRequest, ResetPasswordResponse>, callback: grpc_1.sendUnaryData<ResetPasswordResponse>): void;
    }
    export class UserAuthenticationClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserAuthenticationService.definition, "UserAuthentication", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        Logout: GrpcUnaryServiceInterface<LogoutRequest, LogoutResponse> = (message: LogoutRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LogoutResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LogoutResponse>, callback?: grpc_1.requestCallback<LogoutResponse>): grpc_1.ClientUnaryCall => {
            return super.Logout(message, metadata, options, callback);
        };
        ResetPassword: GrpcUnaryServiceInterface<ResetPasswordRequest, ResetPasswordResponse> = (message: ResetPasswordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResetPasswordResponse>, callback?: grpc_1.requestCallback<ResetPasswordResponse>): grpc_1.ClientUnaryCall => {
            return super.ResetPassword(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedUserDataService {
        static definition = {
            Register: {
                path: "/sso.UserData/Register",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterResponse.deserialize(new Uint8Array(bytes))
            },
            UserInfo: {
                path: "/sso.UserData/UserInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserInfoResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserInfo: {
                path: "/sso.UserData/UpdateUserInfo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserInfoRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserInfoRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserInfoResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserInfoResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/sso.UserData/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteUserResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteUserResponse.deserialize(new Uint8Array(bytes))
            },
            EmailVerification: {
                path: "/sso.UserData/EmailVerification",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EmailVerificationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EmailVerificationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EmailVerificationResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EmailVerificationResponse.deserialize(new Uint8Array(bytes))
            },
            IsAdmin: {
                path: "/sso.UserData/IsAdmin",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IsAdminRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IsAdminRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IsAdminResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IsAdminResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Register(call: grpc_1.ServerUnaryCall<RegisterRequest, RegisterResponse>, callback: grpc_1.sendUnaryData<RegisterResponse>): void;
        abstract UserInfo(call: grpc_1.ServerUnaryCall<UserInfoRequest, UserInfoResponse>, callback: grpc_1.sendUnaryData<UserInfoResponse>): void;
        abstract UpdateUserInfo(call: grpc_1.ServerUnaryCall<UpdateUserInfoRequest, UpdateUserInfoResponse>, callback: grpc_1.sendUnaryData<UpdateUserInfoResponse>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, DeleteUserResponse>, callback: grpc_1.sendUnaryData<DeleteUserResponse>): void;
        abstract EmailVerification(call: grpc_1.ServerUnaryCall<EmailVerificationRequest, EmailVerificationResponse>, callback: grpc_1.sendUnaryData<EmailVerificationResponse>): void;
        abstract IsAdmin(call: grpc_1.ServerUnaryCall<IsAdminRequest, IsAdminResponse>, callback: grpc_1.sendUnaryData<IsAdminResponse>): void;
    }
    export class UserDataClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserDataService.definition, "UserData", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Register: GrpcUnaryServiceInterface<RegisterRequest, RegisterResponse> = (message: RegisterRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterResponse>, callback?: grpc_1.requestCallback<RegisterResponse>): grpc_1.ClientUnaryCall => {
            return super.Register(message, metadata, options, callback);
        };
        UserInfo: GrpcUnaryServiceInterface<UserInfoRequest, UserInfoResponse> = (message: UserInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserInfoResponse>, callback?: grpc_1.requestCallback<UserInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.UserInfo(message, metadata, options, callback);
        };
        UpdateUserInfo: GrpcUnaryServiceInterface<UpdateUserInfoRequest, UpdateUserInfoResponse> = (message: UpdateUserInfoRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserInfoResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserInfoResponse>, callback?: grpc_1.requestCallback<UpdateUserInfoResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserInfo(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<DeleteUserRequest, DeleteUserResponse> = (message: DeleteUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteUserResponse>, callback?: grpc_1.requestCallback<DeleteUserResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
        EmailVerification: GrpcUnaryServiceInterface<EmailVerificationRequest, EmailVerificationResponse> = (message: EmailVerificationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EmailVerificationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EmailVerificationResponse>, callback?: grpc_1.requestCallback<EmailVerificationResponse>): grpc_1.ClientUnaryCall => {
            return super.EmailVerification(message, metadata, options, callback);
        };
        IsAdmin: GrpcUnaryServiceInterface<IsAdminRequest, IsAdminResponse> = (message: IsAdminRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IsAdminResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IsAdminResponse>, callback?: grpc_1.requestCallback<IsAdminResponse>): grpc_1.ClientUnaryCall => {
            return super.IsAdmin(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedAppManagementService {
        static definition = {
            RegisterApp: {
                path: "/sso.AppManagement/RegisterApp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RegisterAppRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RegisterAppRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RegisterAppResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RegisterAppResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteApp: {
                path: "/sso.AppManagement/DeleteApp",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteAppRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteAppRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteAppResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteAppResponse.deserialize(new Uint8Array(bytes))
            },
            AppData: {
                path: "/sso.AppManagement/AppData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AppDataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AppDataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AppDataResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AppDataResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RegisterApp(call: grpc_1.ServerUnaryCall<RegisterAppRequest, RegisterAppResponse>, callback: grpc_1.sendUnaryData<RegisterAppResponse>): void;
        abstract DeleteApp(call: grpc_1.ServerUnaryCall<DeleteAppRequest, DeleteAppResponse>, callback: grpc_1.sendUnaryData<DeleteAppResponse>): void;
        abstract AppData(call: grpc_1.ServerUnaryCall<AppDataRequest, AppDataResponse>, callback: grpc_1.sendUnaryData<AppDataResponse>): void;
    }
    export class AppManagementClient extends grpc_1.makeGenericClientConstructor(UnimplementedAppManagementService.definition, "AppManagement", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RegisterApp: GrpcUnaryServiceInterface<RegisterAppRequest, RegisterAppResponse> = (message: RegisterAppRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RegisterAppResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RegisterAppResponse>, callback?: grpc_1.requestCallback<RegisterAppResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterApp(message, metadata, options, callback);
        };
        DeleteApp: GrpcUnaryServiceInterface<DeleteAppRequest, DeleteAppResponse> = (message: DeleteAppRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteAppResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteAppResponse>, callback?: grpc_1.requestCallback<DeleteAppResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteApp(message, metadata, options, callback);
        };
        AppData: GrpcUnaryServiceInterface<AppDataRequest, AppDataResponse> = (message: AppDataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AppDataResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AppDataResponse>, callback?: grpc_1.requestCallback<AppDataResponse>): grpc_1.ClientUnaryCall => {
            return super.AppData(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedPermissionsManagementService {
        static definition = {
            UserRoles: {
                path: "/sso.PermissionsManagement/UserRoles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserRolesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserRolesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserRolesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserRolesResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateUserRoles: {
                path: "/sso.PermissionsManagement/UpdateUserRoles",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateUserRolesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateUserRolesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateUserRolesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateUserRolesResponse.deserialize(new Uint8Array(bytes))
            },
            CheckPermission: {
                path: "/sso.PermissionsManagement/CheckPermission",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CheckPermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CheckPermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CheckPermissionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CheckPermissionResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract UserRoles(call: grpc_1.ServerUnaryCall<UserRolesRequest, UserRolesResponse>, callback: grpc_1.sendUnaryData<UserRolesResponse>): void;
        abstract UpdateUserRoles(call: grpc_1.ServerUnaryCall<UpdateUserRolesRequest, UpdateUserRolesResponse>, callback: grpc_1.sendUnaryData<UpdateUserRolesResponse>): void;
        abstract CheckPermission(call: grpc_1.ServerUnaryCall<CheckPermissionRequest, CheckPermissionResponse>, callback: grpc_1.sendUnaryData<CheckPermissionResponse>): void;
    }
    export class PermissionsManagementClient extends grpc_1.makeGenericClientConstructor(UnimplementedPermissionsManagementService.definition, "PermissionsManagement", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        UserRoles: GrpcUnaryServiceInterface<UserRolesRequest, UserRolesResponse> = (message: UserRolesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserRolesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserRolesResponse>, callback?: grpc_1.requestCallback<UserRolesResponse>): grpc_1.ClientUnaryCall => {
            return super.UserRoles(message, metadata, options, callback);
        };
        UpdateUserRoles: GrpcUnaryServiceInterface<UpdateUserRolesRequest, UpdateUserRolesResponse> = (message: UpdateUserRolesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserRolesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateUserRolesResponse>, callback?: grpc_1.requestCallback<UpdateUserRolesResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserRoles(message, metadata, options, callback);
        };
        CheckPermission: GrpcUnaryServiceInterface<CheckPermissionRequest, CheckPermissionResponse> = (message: CheckPermissionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CheckPermissionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CheckPermissionResponse>, callback?: grpc_1.requestCallback<CheckPermissionResponse>): grpc_1.ClientUnaryCall => {
            return super.CheckPermission(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedExternalIntegrationService {
        static definition = {
            LdapAuthenticate: {
                path: "/sso.ExternalIntegration/LdapAuthenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LdapAuthenticateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LdapAuthenticateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: LdapAuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => LdapAuthenticateResponse.deserialize(new Uint8Array(bytes))
            },
            GoogleAuthenticate: {
                path: "/sso.ExternalIntegration/GoogleAuthenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GoogleAuthenticateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GoogleAuthenticateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GoogleAuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GoogleAuthenticateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract LdapAuthenticate(call: grpc_1.ServerUnaryCall<LdapAuthenticateRequest, LdapAuthenticateResponse>, callback: grpc_1.sendUnaryData<LdapAuthenticateResponse>): void;
        abstract GoogleAuthenticate(call: grpc_1.ServerUnaryCall<GoogleAuthenticateRequest, GoogleAuthenticateResponse>, callback: grpc_1.sendUnaryData<GoogleAuthenticateResponse>): void;
    }
    export class ExternalIntegrationClient extends grpc_1.makeGenericClientConstructor(UnimplementedExternalIntegrationService.definition, "ExternalIntegration", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        LdapAuthenticate: GrpcUnaryServiceInterface<LdapAuthenticateRequest, LdapAuthenticateResponse> = (message: LdapAuthenticateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LdapAuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LdapAuthenticateResponse>, callback?: grpc_1.requestCallback<LdapAuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.LdapAuthenticate(message, metadata, options, callback);
        };
        GoogleAuthenticate: GrpcUnaryServiceInterface<GoogleAuthenticateRequest, GoogleAuthenticateResponse> = (message: GoogleAuthenticateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GoogleAuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GoogleAuthenticateResponse>, callback?: grpc_1.requestCallback<GoogleAuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.GoogleAuthenticate(message, metadata, options, callback);
        };
    }
}
